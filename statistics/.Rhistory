knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(readxl)
y <- rnorm(n = 1000, mean = 10, sd = 5)
summary(y)
library(tidyverse)
library(readxl)
set.seed(1)
y <- rnorm(n = 1000, mean = 10, sd = 5)
summary(y)
mean(y)
sd(y)
ggplot(y, aes(x=y)) +
geom_histogram()
ggplot(aes(x=y)) +
geom_histogram()
?quantile
quantile(y, probs = seq(0,1, 0.1))
ggplot(aes(y)) + geom_histogram()
ggplot(aes(x=df_y)) geom_histogram()
ggplot(aes(x=df_y)) + geom_histogram()
ggplot() + aes(y) + geom_histogram()
ggplot() + aes(y) + geom_histogram(binwdith=1)
ggplot() + aes(y) + geom_histogram(binwdith=1) +
geom_vline(xintercept = y_mean , linetype = "solid", color = "red", size = 2)
y_mean <- mean(y)
y_median <- median(y)
sd_below <- y_mean - sd(y)
sd_above <- y_mean + sd(y)
mad_below <- y_median - mad(y)
mad_aboce <- y_median + mad(y)
ggplot() + aes(y) + geom_histogram(binwdith=1) +
geom_vline(xintercept = y_mean , linetype = "solid", color = "red", size = 2)
ggplot() + aes(y) + geom_histogram(binwdith=1) +
geom_vline(xintercept = y_mean , linetype = "solid", color = "red", size = 1)
mad_above <- y_median + mad(y)
ggplot() + aes(y) + geom_histogram(binwdith=1) +
geom_vline(xintercept = c(y_mean, y_median, sd_below, sd_above, mad_below, mad_above), linetype = c("solid","dashed","solid","solid","dashed","dashed"), color = c("red","red","blue","blue","blue","blue"), size = c(1,1,1,1,1,1))
ggplot() + aes(y) + geom_histogram(binwdith=1) +
geom_vline(xintercept = c(y_mean, y_median, sd_below, sd_above, mad_below, mad_above), linetype = c("solid","dashed","solid","solid","dashed","dashed"), color = c("red","red","blue","blue","blue","blue"), size = c(0.5,0.5,0.5,0.5,0.5,0.5))
set.seed(1)
z <- rnorm(n = 1000000, mean = 10, sd = 5)
ggplot() + aes(z) + geom_histogram()
ggplot() + aes(z) + geom_histogram(binwdith=1)
?pnorm
pnorm(seq(5,-5,0.1), mean = 0, sd = 1)
a <- seq(5,-5,0.1)
pnorm(seq(-5,5,0.1), mean = 0, sd = 1)
a <- pnorm(seq(-5,5,0.1), mean = 0, sd = 1)
l
ggplot(a) +
geom_point()
ggplot() + aes(a)
a <- pnorm(seq(-5,5,0.1), mean = 0, sd = 1)
ggplot() + aes(a)
ggplot() + aes(a)
ggplot(as.data.frame(a)) + geom_point()
ggplot(as.data.frame(a)) + geom_point(x=a)
ggplot() + geom_point(x=a)
ggplot() + geom_point(x=a)
plot(a)
?qnorm
b <- qnorm(seq(-5,5,0.1), mean = 0, sd = 1)
b <- qnorm(seq(0,1,0.1), mean = 0, sd = 1)
plot(b)
?qnorm
b <- qnorm(a, mean = 0, sd = 1)
ggplot()
ggplot(b)
plot(b)
c <- dnorm(seq(-5,5,0.1), mean = 0, sd = 1)
plot(c)
b <- qnorm(seq(0,1,0.1), mean = 0, sd = 1)
plot(b)
b <- qnorm(seq(0,1,0.01), mean = 0, sd = 1)
plot(b)
1 - pnorm(2)
#alternative
ggplot(as.data.frame(c(-5,5)) +
#alternative
ggplot(as.data.frame(x=c(-5,5), aes(x=x)) +
#alternative
ggplot(as.data.frame(x=c(-5,5), aes(x=x))) +
stat_function(fun = pnorm)
#alternative
ggplot(as.data.frame(x=c(-5,5), aes(x=x))) +
#alternative
ggplot(data.frame(x=c(-5,5), aes(x=x))) +
stat_function(fun = pnorm)
#alternative
ggplot(as.data.frame(x=c(-5,5)), aes(x=x)) +
stat_function(fun = pnorm)
#alternative
ggplot(data.frame(x=c(-5,5)), aes(x=x)) +
stat_function(fun = pnorm)
#alternative
plot2 <- ggplot(data.frame(x, y = c(-5, 5)), aes(y = y)) +
stat_function(fun = qnorm)
#alternative
p <- seq(from = 0, to = 1, by = 0.01)
x <- qnorm(p = p, mean = 0, sd = 1)
plot2 <- ggplot(data.frame(x, y = c(-5, 5)), aes(y = y)) +
stat_function(fun = qnorm)
plot2 <- ggplot(data.frame(x, y = c(-5, 5)), aes(y = y)) +
stat_function(fun = qnorm)
plot2 <- ggplot(data.frame(c(0,1), y = c(-5, 5)), aes(y = y)) +
stat_function(fun = qnorm)
b <- qnorm(seq(0,1,0.01), mean = 0, sd = 1)
plot(b)
pnorm(2) - pnorm(-2)
d <- pnorm(2) - pnorm(-2)
d
1-d
?wilcox
?wilcox.test
wilcox.test(wa~wb)
wa <- c(1:10)
wb <- c(5:14)
wilcox.test(wa~wb)
wilcox.test(wa,wb)
data <- read_csv("/project/obds/shared/resources/3_r_stats_genomics/statistics/data/gene_exprs.csv")
data <- read_csv("/project/obds/shared/resources/3_r_stats_genomics/statistics/data/gene_exprs.csv")
data
t.test(group~gene_exprs, data)
t.test(gene_exprs,group, data)
data
t.test(gene_exprs~group, data)
logcounts_matrix <- read_excel("/t1-data/project/obds/shared/resources/3_r_stats_genomics/statistics/data/logcount.csv")
logcounts_matrix <- read_excel("/t1-data/project/obds/shared/resources/3_r_stats_genomics/statistics/data/logcounts.csv")
logcounts_matrix <- read_csv("/t1-data/project/obds/shared/resources/3_r_stats_genomics/statistics/data/logcounts.csv")
dim(logcounts_matrix)
logcounts_matrix <- read_csv("/t1-data/project/obds/shared/resources/3_r_stats_genomics/statistics/data/logcounts.csv")
logcounts_matrix
data
t.test(gene_exprs~group, data)
?read_excel
logcounts_matrix <- read_excel("/t1-data/project/obds/shared/resources/3_r_stats_genomics/statistics/data/GSE111543.xlsx")
logcounts_matrix
dim(logcounts_matrix)
logcounts_matrix
View(logcounts_matrix)
cell_info <- read_excel("/t1-data/project/obds/shared/resources/3_r_stats_genomics/statistics/data/GSE111543.xlsx", "cell_info")
# all(rownames(cell_info$Sample) == colnames(logcounts_matrix))
head(cell_info)
logcounts_matrix <- read_excel("/t1-data/project/obds/shared/resources/3_r_stats_genomics/statistics/data/GSE111543.xlsx", "logcounts")
logcounts_matrix
dim(logcounts_matrix)
t.test(cell_info$Infection~logcounts_matrix$gene[gene_index])
t.test(x=cell_info$Infection, y=logcounts_matrix$gene[gene_index])
gene_index <- 1
t.test(x=cell_info$Infection, y=logcounts_matrix$gene[gene_index])
t.test(y=cell_info$Infection, x=logcounts_matrix$gene[gene_index])
t.test(cell_info$Infection~x=logcounts_matrix$gene[gene_index])
logcounts_matrix
column_to_rownames(logcounts_matrix, var="gene")
logcounts_matrix <- column_to_rownames(logcounts_matrix, var="gene")
dim(logcounts_matrix)
logcounts_matrix <- as.matrix(logcounts_matrix)
dim(logcounts_matrix)
head(logcounts_matrix)
cell_info <- read_excel("/t1-data/project/obds/shared/resources/3_r_stats_genomics/statistics/data/GSE111543.xlsx", "cell_info")
cell_info
all(rownames(cell_info$Sample) == colnames(logcounts_matrix))
head(cell_info)
head(cell_info)
cell_info
?unique
View(cell_info)
cells_infected <- cell_info %>%
filter(Infection=="STM-LT2")
cells_mock <- cell_info %>%
filter(Infection=="Mock")
View(cells_infected)
cells_infected <- cell_info %>%
filter(Infection=="STM-LT2") %>%
pull(Sample)
cells_mock <- cell_info %>%
filter(Infection=="Mock") %>%
pull(Sample)
cell_info <- read_excel("/t1-data/project/obds/shared/resources/3_r_stats_genomics/statistics/data/GSE111543.xlsx", "cell_info")
cell_info
cells_infected <- cell_info %>%
filter(Infection=="STM-LT2") %>%
pull(Sample)
cells_mock <- cell_info %>%
filter(Infection=="Mock") %>%
pull(Sample)
expr_infected <- logcounts_matrix[1, cells_infected]
expr_mock <- logcounts_matrix[1, cells_mock]
expr_infected
expr_mock
t.test(expr_infected,expr_mock)
row1_test <- t.test(expr_infected,expr_mock)
str(row1_test)
t_test_row <- function(index) {
expr_infected <- logcounts_matrix[index, cells_infected]
expr_mock <- logcounts_matrix[index, cells_mock]
row_test <- t.test(expr_infected,expr_mock)
return(row_test$p.value)
}
t_test_row(index = 1)
?vapply(list, function, FUN.VALUE = type, ...)
?vapply
t_test_pvalues <- vapply(
X = rownames(logcounts_matrix),
FUN = t_test_row() ,
FUN.VALUE = p.values ,
)
head(t_test_pvalues)
t_test_pvalues <- vapply(
X = rownames(logcounts_matrix),
FUN = t_test_row() ,
FUN.VALUE = p.values ,
)
t_test_pvalues <- vapply(
X = rownames(logcounts_matrix),
FUN = t_test_row ,
FUN.VALUE = p.values ,
)
t_test_pvalues <- vapply(
X = rownames(logcounts_matrix),
FUN = t_test_row ,
FUN.VALUE = numeric(1) ,
)
t_test_pvalues <- vapply(
X = rownames(logcounts_matrix),
FUN = t_test_row ,
FUN.VALUE = numeric(1)
)
head(t_test_pvalues)
